import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.hibernate.orm' version '6.4.1.Final'
    id 'org.graalvm.buildtools.native' version '0.9.28'
    id 'org.jetbrains.kotlin.jvm' version '2.0.20-RC'
    id "org.jetbrains.kotlin.plugin.spring" version "2.0.20-RC" // simplifies spring proxying
}

group = 'com.apress'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.0")
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Consul
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'

    // OpenFeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'


    // Kubernetes
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-client-all'


    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
	useJUnitPlatform()
}

hibernate {
  enhancement {
    enableAssociationManagement = true
  }
}

tasks.named("bootBuildImage") {
    builder = "dashaun/builder:tiny"
    environment = ["BP_NATIVE_IMAGE" : "true"]
}

//    kotlin {
//	    jvmToolchain(17)
//    }
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

